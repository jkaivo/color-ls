#!/bin/sh

# MIT License
#
# Copyright (c) 2018 Jakob Kaivo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# TODO: handle recursive stuff

output=x	# TODO: change this back to -C when that is fixed
long=0
dash_F_specified=

_columns_down () {
	awk -vwidest=0 '
		{
			if (length($0) > widest) {
				widest = length($0);
			}
			all[NR] = $0;
		}

		END {
			widest++;
			column = 0;
			columns = ENVIRON["COLUMNS"];
			if (columns == 0) {
				columns = 80;
			}
			ncolumns = columns / widest;

			i = 1;
			while (i <= NR) {
				# FIXME: this is all jacked up
				printf("%-*s", widest, all[(row * ncolumns) + (i % ncolumns)]);
				column += widest;
				if (column > columns) {
					printf("\n");
					column = 0;
					row++;
				}
				i++;
			}

			if (column != 0) {
				printf("\n");
			}
		}'
}

_columns_across () {
	awk -vwidest=0 '
		{
			if (length($0) > widest) {
				widest = length($0);
			}
			all[NR] = $0;
		}

		END {
			widest++;
			column = 0;
			columns = ENVIRON["COLUMNS"];
			if (columns == 0) {
				columns = 80;
			}

			i = 1;
			while (i <= NR) {
				printf("%-*s", widest, all[i]);
				column += widest;
				if (column > columns) {
					printf("\n");
					column = 0;
				}
				i++;
			}

			if (column != 0) {
				printf("\n");
			}
		}'
}

_commas () {
	awk -vcomma=0 '
		{
			printf("%s%s", comma == 1 ? ", " : "", $0 );
			comma = 1;
		}

		END {
			printf("\n");
		}'
}

_output () {
	case $output in
	C)	_columns_down;;
	x)	_columns_across;;
	m)	_commas;;
	1|l|o|n|g)	cat;;
	esac
}

# TODO: grab first character from long listings
_colorize () {
	awk -vcolor=0 -vlong=${long} '
		{ color=39; }
		/\/$/ || (long && /^d/) || (long && $0 == $1) { color=34; }
		/\*$/ || (long && /^-/ && $1 ~ /x/){ color=32; }
		/\|$/ || (long && /^p/) { color=33; }
		/@$/ || (long && /^l/) { color=35; }
		long { printf("\033\[%sm%s\033\[0m\n", color, $0); }'
}

_remove_symbols () {
	if [ -z "$dash_F_specified" ]; then
		sed -e 's/[/*@|]\(.\[0m\)$/\1/g;s/@\( -> \)/\1/g'
	else
		cat
	fi
}

while getopts ACFHLRSacdfgiklmopqrstux1 option
do
	case $option in
	l|o|n|g)	output=${option}; long=1;;
	C|m|x)		output=${option}; long=0;;
	1)		output=1;;
	F)		dash_F_specified=-F;;
	?)		;;
	esac
done

if [ ${long} == 0 ]; then
	dash_F=-F
fi

# FIXME: the script returns 0 even if ls does not
# FIXME: always pass -1 when $dash_1 is specified, but do it before operands
ls $dash_F ${1+$@} | _colorize | _remove_symbols | _output
